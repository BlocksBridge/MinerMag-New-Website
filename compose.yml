version: "3.8"

services:
  # Your Next.js application service
  theminermag: # !!! This is the name you'll use in your Caddyfile reverse_proxy !!!
    build:
      context: . # Assuming your Dockerfile is in the same directory
      dockerfile: Dockerfile # Your Next.js Dockerfile
    volumes:
      # Mount a volume to persist the standalone build output and make it accessible to Caddy
      - nextjs_standalone_data:/app/.next/standalone
    # We don't expose ports to the host here if Caddy is in the same network
    # ports:
    #   - "3000" # Only expose internally to the docker network
    restart: "always"

    environment:
      - NODE_ENV=production
      - PORT=3000 # Ensure Next.js listens on this port

  # Your Caddy service
  caddy:
    image: caddy:latest
    ports:
      - "80:80" # Standard HTTP port
      - "443:443" # Standard HTTPS port
    volumes:
      - ./Caddyfile/Caddyfile:/etc/caddy/config/Caddyfile # Mount your Caddyfile
      - caddy_data:/data # Caddy data for certificates etc.
      # Mount the same volume as the Next.js service to access the standalone output
      # The path here (/app/.next/standalone) should match the path used in the Caddyfile's root directives.
    #      - nextjs_standalone_data:/path/where/caddy/accesses/standalone
    command: caddy run --config /etc/caddy/config/Caddyfile

    depends_on:
      - theminermag # Ensure Next.js service starts before Caddy

# Define the volumes
volumes:
  nextjs_standalone_data: # Volume to share Next.js standalone build output
  caddy_data: # Volume for Caddy data (certs, etc.)
